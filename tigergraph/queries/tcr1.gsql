USE GRAPH ldbc_fin
CREATE or REPLACE QUERY tcr1(
  VERTEX<Account> id,
  UINT startTime,
  UINT endTime,
  INT truncationLimit,
  STRING truncationOrder
) FOR GRAPH ldbc_fin syntax v1{
  TYPEDEF TUPLE <UINT otherId, INT accountDistance, UINT mediumId, STRING mediumType> RESULT;
  SetAccum<RESULT> @result_set;
  HeapAccum<RESULT>(accountDistance ASC, otherId ASC, mediumId ASC) @@result;

  ArrayAccum<MinAccum<UINT>> @min_times[4];

  StepNodes = {id};

  TMP = SELECT s from StepNodes:s POST-ACCUM s.@min_times[0] += 0;

  INT i = 1;

  WHILE StepNodes.size() > 0 and i <= 3 DO
    StepNodes =
          SELECT t
          FROM StepNodes:s - (transfer:e) -> Account:t
          WHERE e.timestamp > startTime and e.timestamp < endTime
              and e.timestamp > s.@min_times[i-1]
          ACCUM t.@min_times[i] += e.timestamp;

    R =
      SELECT t
      FROM StepNodes:s - (signIn_REVERSE:e) -> Medium:t
      WHERE e.timestamp > startTime and e.timestamp < endTime and t.isBlocked == true
      ACCUM s.@result_set += RESULT(s.id, i, t.id, t.mediumType)
      POST-ACCUM
        FOREACH result in s.@result_set DO
          @@result += result
        END,
        s.@result_set.clear()
    ;

    i = i + 1;

  END;

  PRINT @@result;
}